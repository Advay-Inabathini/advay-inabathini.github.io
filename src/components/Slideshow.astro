---
interface Photo {
  id: number;
  title: string;
  src: string;
  alt: string;
  exif: string;
}

interface Props {
  photos: Photo[];
}

const { photos } = Astro.props;
---
<div id="slideshow" class="fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center hidden z-50">
  <div class="relative max-w-4xl max-h-full p-4">
    <button id="slideshow-close" class="absolute top-0 right-0 mt-4 mr-4 text-white text-3xl z-10">&times;</button>
    
    <img id="slideshow-image" src="" alt="" class="max-w-full max-h-[80vh] object-contain">
    
    <div id="slideshow-caption" class="text-center text-white p-4">
      <h3 id="slideshow-title" class="text-xl font-bold"></h3>
      <p id="slideshow-exif" class="text-sm text-gray-400"></p>
    </div>

    <button id="slideshow-prev" class="absolute left-0 top-1/2 -translate-y-1/2 text-white text-4xl p-4">&lt;</button>
    <button id="slideshow-next" class="absolute right-0 top-1/2 -translate-y-1/2 text-white text-4xl p-4">&gt;</button>
  </div>
</div>

<script define:vars={{ photos }}>
  document.addEventListener('DOMContentLoaded', () => {
    const slideshow = document.querySelector('#slideshow');
    const closeBtn = document.querySelector('#slideshow-close');
    const prevBtn = document.querySelector('#slideshow-prev');
    const nextBtn = document.querySelector('#slideshow-next');
    const imageEl = document.querySelector('#slideshow-image');
    const titleEl = document.querySelector('#slideshow-title');
    const exifEl = document.querySelector('#slideshow-exif');
    const photoGrid = document.querySelector('#photo-grid');

    if (!slideshow || !closeBtn || !prevBtn || !nextBtn || !imageEl || !titleEl || !exifEl || !photoGrid) return;

    let currentSlideshowPhotos = [];
    let currentIndex = 0;

    function updateDisplay(photo) {
      if (!photo) return;
      imageEl.src = photo.src;
      imageEl.alt = photo.alt;
      titleEl.textContent = photo.title;
      exifEl.textContent = photo.exif;
    }

    function openSlideshow(startId) {
      // 1. Get the list of currently visible photos from the grid
      const visibleButtons = photoGrid.querySelectorAll('.photo-thumbnail-btn');
      const visiblePhotoIds = Array.from(visibleButtons).map(btn => parseInt(btn.dataset.photoId, 10));
      
      const photosById = new Map(photos.map(p => [p.id, p]));
      currentSlideshowPhotos = visiblePhotoIds.map(id => photosById.get(id)).filter(Boolean);

      // 2. Find the starting photo and its index in the visible list
      currentIndex = currentSlideshowPhotos.findIndex(p => p.id === startId);
      if (currentIndex === -1) return; // Should not happen if clicked from grid

      // 3. Update the display and show the slideshow
      updateDisplay(currentSlideshowPhotos[currentIndex]);
      slideshow.classList.remove('hidden');
    }

    function showNext() {
      currentIndex = (currentIndex + 1) % currentSlideshowPhotos.length;
      updateDisplay(currentSlideshowPhotos[currentIndex]);
    }

    function showPrev() {
      currentIndex = (currentIndex - 1 + currentSlideshowPhotos.length) % currentSlideshowPhotos.length;
      updateDisplay(currentSlideshowPhotos[currentIndex]);
    }

    function closeSlideshow() {
      slideshow.classList.add('hidden');
    }

    photoGrid.addEventListener('click', (e) => {
      const target = e.target.closest('.photo-thumbnail-btn');
      if (target && target.dataset.photoId) {
        openSlideshow(parseInt(target.dataset.photoId, 10));
      }
    });

    closeBtn.addEventListener('click', closeSlideshow);
    nextBtn.addEventListener('click', showNext);
    prevBtn.addEventListener('click', showPrev);

    // Close with Escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && !slideshow.classList.contains('hidden')) {
        closeSlideshow();
      }
    });

    // Close by clicking background
    slideshow.addEventListener('click', (e) => {
      if (e.target === slideshow) {
        closeSlideshow();
      }
    });
  });
</script> 